
terraformer: {

//  Resources common to more than one super cluster e.g. VPC
  common_resources: {

    sub_repo_path: vpc

    cred_type: shtroompf
    cred_role: pitufo
    cred_profile: grunion

    parallelism: 10

    init: true
    verbose: true  # extra logging
    view_state: true # view state at the end of actions

    partial: false # apply the command to a subset of modules

    backend_name: ${unique_vpc_name}

    backend: {
      bucket: shlaflaf/kurkevan
      key: "terraform/state/"${deploy_env}"/common_resources/"${unique_vpc_name}
      region = ${bucket_region}
      profile = ${aws_cli_profile}
    }

    destroy_protocol: {

      partial: false # apply the command to a subset of modules

      partial_modules: []

      kube_context: docker-desktop
    }

    tfvars: {

      aws_profile: ${aws_profile}
      aws_region: ${aws_zone}
      unique_vpc_name: ${unique_vpc_name}

      map_users = [
        {
          userarn: "arn:aws:iam::"${aws_account_id}":user/"${aws_user}
          username: ${aws_user}
          groups: ["system:masters"]
        }
      ]

      ## VPC
      vpc_cidr: "10.10.0.0/16"
      private_subnets_number: 2
      public_subnets_number: 2

      ## EKS(for airflow)
      create_eks: true
      airflow_instance: "m5.xlarge"
      airflow_disk_size: 20
      airflow_desired: 2
      airflow_min: 1
      airflow_max: 3
      master_kubernetes_version: "1.22"
      eks_tags: {
        Environment: "Master"
      }
    }
  }

  super_cluster: {

    cred_type: wylie_coyote
    cred_role: arnav
    cred_profile: shovav

    parallelism: 10

    init: true # init state
    verbose: true  # extra logging
    view_state: true # view state at the end of actions

    partial: false # apply the command to a subset of modules

    partial_modules: []

    backend_name: ${unique_name}

    backend: {
      bucket = sleepy/hollow
      key = "terraform/state/"${deploy_env}"/super_cluster/"${unique_name}
      region = ${bucket_region}
      profile = ${aws_cli_profile}
    }

    destroy_protocol: {

      partial: false # apply the command to a subset of modules

      partial_modules: []

      kube_context: docker-desktop
    }

    tfvars: {

      create_emr: true
      create_elk: true
      create_route53: true
      create_eks: true

      create_kafka_group: true
      create_cassandra_group: true
      create_evolution_expensive_group: true
      create_grids_expensive_group: true
      create_bootstrap_expensive_group: true
      create_bot_spot_group: true
      create_botc_spot_group: false
      create_bot_expensive_group: false
      create_bot_cheap_group: false

      //      comment: "This terraform tfvars is created by terraformer.conf file in the project configuration!"

      ## Main variables that used for generation names. You can leave variable unique_name empty and terraform will automatically assign random_suffix to resources name
      dev_stage: ${deploy_env}
      unique_name: ${unique_name}
      unique_vpc_name: ${unique_vpc_name}
      ssh_password: ${ssh_password}

      ## AWS
      aws_profile: ${aws_profile}
      aws_region: ${aws_zone}

      ## VPC
      bastion_cidr_accept: "0.0.0.0/0"

      ## IAM
      autoscale_role_name: "cluster-autoscaler-dev"

      ## EKS
      master_kubernetes_version: "1.22"
      eks_tags: {
        Environment: ${deploy_env}
      }
      kafka_instance: "m5.4xlarge"
      kafka_disk_size: 100
      kafka_min: ${third_party.kafka_replicas}
      kafka_desired: ${third_party.kafka_replicas}
      kafka_max: ${third_party.kafka_replicas}

      cassandra_instance: "c5.xlarge"
      cassandra_disk_size: 10
      cassandra_min: ${third_party.cassandra_replicas}
      cassandra_desired: ${third_party.cassandra_replicas}
      cassandra_max: 50

      bootstrap_instance: "r5a.xlarge"
      bootstrap_disk_size: 10
      bootstrap_min: 1
      bootstrap_desired: 1
      bootstrap_max: 1

      evolution_instance: "r5a.xlarge"
      evolution_disk_size: 2000
      evolution_min: 1
      evolution_desired: 1
      evolution_max: 1

      grids_instance: "r5a.xlarge"
      grids_disk_size: 200
      grids_min: 1
      grids_desired: 1
      grids_max: 1


      bot_spot_instance_list: ["m5a.24xlarge", "m5a.16xlarge", "m5a.12xlarge", "m5a.8xlarge"]
      bot_disk_size: 40 # review the necessity of bot disk
      bot_min: 1
      bot_desired: 1
      bot_max: 100

      botc_spot_instance_list: ["c5.24xlarge", "c5.18xlarge", "c5.12xlarge", "c5.9xlarge"]
      botc_disk_size: 30 # review the necessity of bot disk
      botc_min: 1
      botc_desired: 1
      botc_max: 100

      bot_cheap_small_instance: "c5a.4xlarge"
      bot_cheap_small_disk_size: 40 # review the necessity of bot disk
      bot_cheap_small_min: 1
      bot_cheap_small_desired: 1
      bot_cheap_small_max: 60


      bot_independent_expensive_instance: "c5.4xlarge"
      bot_independent_expensive_min: 1
      bot_independent_expensive_desired: 1
      bot_independent_expensive_max: 1
      bot_independent_expensive_disk_size: 100

      # EMR cluster
      ebs_root_volume_size: 100
      visible_to_all_users: true
      # https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-release-components.html
      emr_concurrency_level: 256
      release_label: "emr-6.2.0"
      emr_minimum_capacity_units: 1
      emr_maximum_capacity_units: 10
      emr_maximum_ondemand_capacity_units: 10
      emr_maximum_core_capacity_units: 5

      applications: ["Hadoop", "Spark", "Zeppelin", "JupyterHub"]
      core_instance_group_instance_type: "m5.xlarge"
      emr_minimum_capacity_units: 2
      core_instance_group_instance_count: 3
      core_instance_group_ebs_size: 100
      core_instance_group_ebs_type: "gp2"
      core_instance_group_ebs_volumes_per_instance: 1
      master_instance_group_instance_type: "m5.xlarge"
      master_instance_group_instance_count: 1
      master_instance_group_ebs_size: 100
      master_instance_group_ebs_type: "gp2"
      master_instance_group_ebs_volumes_per_instance: 1
      create_task_instance_group: false
      ssh_public_key_path: "/secrets"
      generate_ssh_key: true
      emr_bootstrap_path: "s3://"${artifactory_bucket}"/emr/bootstrap.sh"

      bucket_uri: "s3n://aws-logs-"${aws_account_id}"-us-east-2/"
      kafka_url: "Zimbabowe"

      elk_master_use_custom_ami: true
      elk_master_ami_id: ""
      elk_worker_use_custom_ami: true
      elk_worker_ami_id: ""


      ## ELK
      elk_master_instance_type: "m5.large"
      elk_worker_instance_type: "m5.large"
      elk_master_count: 1
      elk_worker_count: 2
      elk_snapshot_bucket: "aws-logs-"${aws_account_id}"-us-east-2"
    }
  }
}


